@model List<ObjetoCtasCtesPorConciliar>
@{
    ViewBag.Title = "TestGroup";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />
<div class="row">
    <div class="panel-heading">
        <div class="col-sm-12 col-md-12">
            @using (Html.BeginForm("getExcelEstadoCuentasCorrientes", "ContabilidadAuxiliares", FormMethod.Post))
            {
                <div class="col-md-2 pull-right">

                    <br />
                    <button @*@(Model == null || Model.Count == 0 ? "disabled" : string.Empty)*@ class="btn btn-success waves-effect waves-light pull-right" value="Exportar" name="Save" type="submit" data-animation="fadein" data-plugin="custommodal" data-overlaySpeed="200" data-overlayColor="#36404a">
                        <span class="btn-label"><i class="fa fa-file-excel-o"></i></span>Exportar
                    </button>
                    <br />

                    <br />
                </div>
            }
            <div class="col-md-2 pull-right">

                <br />
                <button class="btn btn-default" onclick="ExportarPDF()">
                    <span class="btn-label"><i class="fa fa-file-pdf-o"></i></span>Exportar PDF
                </button>
                <br />

                <br />
            </div>
        </div>



            <h2 class="page-header">Estado de Cuentas Corrientes</h2>
            <ol class="breadcrumb">
                <li>
                    <a href="#">Contabilidad Reportes</a>
                </li>
                <li>
                    <a href="#">-</a>
                </li>
                <li class="active">
                    Estado de Cuentas Corrientes
                </li>
            </ol>
        </div>
    </div>
</div>
<br />

<div class="form-group">
    <div class="row">
        <div class="card-box">
            @using (Html.BeginForm("EstCtasCtesConciliado", "ContabilidadAuxiliares", FormMethod.Post))
            {
                <div class="row form-group">
                    <div class="col-md-2">
                        <label>Selecciona Lista</label>
                        <select class="form-control" id="TipoListaAmostrar" name="TipoListaAmostrar">
                            <option>Selecciona</option>
                            <option value="0">Lista Completa</option>
                            <option value="1">Lista Conciliada</option>
                            <option value="2">Lista No Conciliada</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label>Cuenta Contable</label>
                        <select class="form-control" id="CuentaAuxiliar" name="CuentaAuxiliar">
                            <option>Selecciona</option>
                            @foreach (CuentaContableModel CtaAux in ViewBag.lstCtasCtes)
                            {
                                string FormaCuentaContable = CtaAux.CodInterno + "  " + CtaAux.nombre;
                                <option value="@CtaAux.CuentaContableModelID">@FormaCuentaContable</option>
                            }
                        </select>
                    </div>
                    <div class="col-lg-2 form-group">
                        <label class="control-label">Año</label>
                        <input type="number" class="form-control" name="Anio" id="Anio" value="" />
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>Todos los años?</label>
                        <input type="checkbox" class="form-control CheckB-style" name="TodosLosAnios" id="TodosLosAnios" />
                    </div>
                    <div class="col-lg-2 form-group">
                        <label class="control-label">Rut</label>
                        <input type="text" class="form-control" id="Rut" name="Rut" maxlength="10" />
                    </div>
                    <div class="col-lg-2 form-group">
                        <label class="control-label">Razon Social</label>
                        <input type="text" class="form-control" id="RazonSocial" name="RazonSocial" />
                    </div>
                    <div class="col-lg-2 form-group">
                        <label class="control-label">Folio</label>
                        <input class="form-control" type="number" name="Folio" id="Folio" value="" />
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-success centrar" id="Guardar" name="Guardar">Buscar</button>
                    </div>
                </div>
            }
            @{
                int Correlativo = 0;
                decimal TotalGeneralHaber = 0;
                decimal TotalGeneralDebe = 0;
            }
            <div id="PagCtaCte" class="table-rep-plugin">
                <div class="table table-responsive">
                    <div class="panel-body" id="parshial" style="font-size:13px;">             

                        <div id="InfoParaPdf">
                            <h4 id="AcumuladoAniosAnteriores">Saldo Apertura: @ParseExtensions.NumeroConPuntosDeMiles(ViewBag.TotalSaldoAcumulado)</h4>
                        </div>
          
                        @foreach (var ObjetoCuenta in Model)
                        {
                            foreach (var Contenido in ObjetoCuenta.Contenido)
                            {
                                <table class="table table-responsive table-bordered compact" name="theContent">
                                    <thead>
                                        <tr>
                                            <th colspan="11"> @ParseExtensions.ObtenerCodigoYNombreCtaContable(Contenido.CodInterno, ViewBag.ObjCliente)</th>
                                        </tr>
                                        <tr>
                                            <th colspan="11">@Contenido.Rut</th>

                                        </tr>
                                        <tr>
                                            <th>#</th>
                                            <th>Rut</th>
                                            <th>Nombre</th>
                                            <th>Fecha</th>
                                            <th>Num Doc</th>
                                            <th>Comprobante</th>
                                            <th>Documento</th>
                                            <th>Vencim</th>
                                            <th>Debe</th>
                                            <th>Haber</th>
                                            <th>Saldo</th>
                                        </tr>
                                    </thead>
                                    <tbody id="cuerpoDeLatabla">
                                        <tr>
 
                                            <td colspan="11"><b>Saldo Apertura:&nbsp;@ParseExtensions.NumeroConPuntosDeMiles(Contenido.SaldoAcumuladoRut)</b></td>
                                        </tr>
                                        @foreach (var InfoCtasCtes in Contenido.Contenido)
                                        {
                                            Correlativo++;
                                            string idFila = "idFila" + Correlativo.ToString();
                                            string ParaParametro = idFila;
                                            string ColorConciliados = "";
                                            if (InfoCtasCtes.EstaConciliado == true)
                                            {
                                                ColorConciliados = "bg-success text-white";
                                            }
                                            <tr class="@ColorConciliados">
                                                <td>@Correlativo</td>
                                                <td>@InfoCtasCtes.RutPrestador</td>
                                                <td>@InfoCtasCtes.NombrePrestador</td>
                                                <td>@ParseExtensions.ToDD_MM_AAAA(InfoCtasCtes.Fecha)</td>
                                                <td name="Folio" id="@idFila">@InfoCtasCtes.Folio</td>
                                                <td><a class="label label-table label-warning" href="@Url.Action("IngresoVoucher", "Contabilidad", new { IDVoucher = InfoCtasCtes.VoucherID })" target="_blank">@InfoCtasCtes.Comprobante</a></td>
                                                @if (InfoCtasCtes.Documento == 0)
                                                {
                                                    <td>Honorarios</td>
                                                }
                                                else
                                                {
                                                    <td>@ParseExtensions.EnumGetDisplayAttrib(InfoCtasCtes.Documento)</td>
                                                }
                                                <td></td>
                                                <td>@ParseExtensions.NumeroConPuntosDeMiles(InfoCtasCtes.Debe)</td>
                                                <td>@ParseExtensions.NumeroConPuntosDeMiles(InfoCtasCtes.Haber)</td>
                                                <td></td>
                                            </tr>
                                        }

                                        <tr class="FooterTable">
                                            <td class="FontSize text-center" colspan="7"></td>
                                            <td class="FontSize text-right"><b>TOTAL</b></td>
                                            @if(Contenido.SaldoAcumuladoRut == 0) { 
                                                <td class="FontSize text-right debe"><b>@ParseExtensions.NumeroConPuntosDeMiles(Contenido.TotalDebe)</b></td>
                                                <td class="FontSize text-right haber"><b>@ParseExtensions.NumeroConPuntosDeMiles(Contenido.TotalHaber)</b></td>
                                                <td class="FontSize text-right"><b>@ParseExtensions.NumeroConPuntosDeMiles(Contenido.SaldoRut)</b></td>
                                            }
                                            else if (Contenido.SaldoAcumuladoRut >= 1)
                                            {
                                                decimal EsPositivoHaber = Contenido.SaldoAcumuladoRut + Contenido.TotalHaber;
                                                decimal TotalSaldoRut = Math.Abs(EsPositivoHaber) - Math.Abs(Contenido.TotalDebe);
                                                <td class="FontSize text-right debe"><b>@ParseExtensions.NumeroConPuntosDeMiles(Contenido.TotalDebe)</b></td>
                                                <td class="FontSize text-right haber"><b>@ParseExtensions.NumeroConPuntosDeMiles(EsPositivoHaber)</b></td>
                                                <td class="FontSize text-right"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalSaldoRut)</b></td>
                                            }
                                            else if (Contenido.SaldoAcumuladoRut <= -1)
                                            {
                                                decimal EsNegativoDebe = Math.Abs(Contenido.SaldoAcumuladoRut) + Math.Abs(Contenido.TotalDebe);
                                                decimal TotalSaldoRut = Math.Abs(Contenido.TotalHaber) - Math.Abs(EsNegativoDebe);
                                                <td class="FontSize text-right debe"><b>@ParseExtensions.NumeroConPuntosDeMiles(EsNegativoDebe)</b></td>
                                                <td class="FontSize text-right haber"><b>@ParseExtensions.NumeroConPuntosDeMiles(Contenido.TotalHaber)</b></td>
                                                <td class="FontSize text-right"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalSaldoRut)</b></td>
                                            }
                                        </tr>

                                    </tbody>
                                </table>
                            }

                            <table name="TotalCtasContables" class="table table-responsive table-bordered table-hover" id="dataTables-example">
                                <thead>
                                    <tr>
                                        <th class="FontSize text-center">-</th>
                                        <th class="FontSize text-center">TOTAL CTA CONTABLE</th>
                                        <th class="FontSize text-center">DEBE</th>
                                        <th class="FontSize text-center">HABER</th>
                                        <th class="FontSize text-center">SALDO</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td><b>Saldo Apertura: @ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalSaldoAcumulado)</b></td>
                                    </tr>
                                    <tr>
                                        @if(ObjetoCuenta.TotalSaldoAcumulado == 0) { 
                                          
                                            <td colspan="2" class="FontSize text-center"><b>@ParseExtensions.ObtenerCodigoYNombreCtaContable(ObjetoCuenta.CodigoInterno, ViewBag.ObjCliente)</b></td>
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalDebe)</b></td>
                                                TotalGeneralDebe += ObjetoCuenta.TotalDebe;
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalHaber)</b></td>
                                                TotalGeneralHaber += ObjetoCuenta.TotalHaber;
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalSaldo)</b></td>
                                        }
                                        else if (ObjetoCuenta.TotalSaldoAcumulado >= 1)
                                        {
                                            decimal EsPositivoHaber = Math.Abs(ObjetoCuenta.TotalSaldoAcumulado) + Math.Abs(ObjetoCuenta.TotalHaber);
                                            decimal TotalSaldoCuentaContable = Math.Abs(EsPositivoHaber) - Math.Abs(ObjetoCuenta.TotalDebe);
                                            <td colspan="2" class="FontSize text-center"><b>@ParseExtensions.ObtenerCodigoYNombreCtaContable(ObjetoCuenta.CodigoInterno, ViewBag.ObjCliente)</b></td>
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalDebe)</b></td>
                                                TotalGeneralDebe += ObjetoCuenta.TotalDebe;
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(EsPositivoHaber)</b></td>
                                                TotalGeneralHaber += ObjetoCuenta.TotalHaber;
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalSaldoCuentaContable)</b></td>
                                        }
                                        else if (ObjetoCuenta.TotalSaldoAcumulado <= -1)
                                        {
                                            decimal EsNegativoDebe = Math.Abs(ObjetoCuenta.TotalSaldoAcumulado) + Math.Abs(ObjetoCuenta.TotalDebe);
                                            decimal TotalSaldoCuentaContable = Math.Abs(ObjetoCuenta.TotalHaber) - Math.Abs(EsNegativoDebe);
                                            <td colspan="2" class="FontSize text-center"><b>@ParseExtensions.ObtenerCodigoYNombreCtaContable(ObjetoCuenta.CodigoInterno, ViewBag.ObjCliente)</b></td>
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(EsNegativoDebe)</b></td>
                                                TotalGeneralDebe += ObjetoCuenta.TotalDebe;
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalHaber)</b></td>
                                                TotalGeneralHaber += ObjetoCuenta.TotalHaber;
                                            <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(ObjetoCuenta.TotalSaldo)</b></td>
                                        }
                                    </tr>
                                </tbody>
                            </table>
                                <br />
                                <br />
                                <br />
                                <br />
                                            }
                        <table id="TotalFinalCtasCtes" class="table table-responsive table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th class="FontSize text-center">-</th>
                                    <th class="FontSize text-center">TOTAL FINAL</th>
                                    <th class="FontSize text-center">DEBE</th>
                                    <th class="FontSize text-center">HABER</th>
                                    <th class="FontSize text-center">SALDO</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    @if(ViewBag.TotalSaldoAcumulado == 0) { 
                                        <td colspan="2" class="FontSize text-center"><b>TOTAL FINAL</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalGeneralDebe)</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalGeneralHaber)</b></td>
                                            decimal TotalGeneralSaldo = Math.Abs(TotalGeneralHaber) - Math.Abs(TotalGeneralDebe);
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalGeneralSaldo)</b></td>
                                    }else if(ViewBag.TotalSaldoAcumulado >= 1)
                                    {
                                        decimal EsPositivoHaber = Math.Abs(ViewBag.TotalSaldoAcumulado) + Math.Abs(TotalGeneralHaber);
                                        decimal TotalSaldoFinal = Math.Abs(EsPositivoHaber) - Math.Abs(TotalGeneralDebe);
                                        <td colspan="2" class="FontSize text-center"><b>TOTAL FINAL</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalGeneralDebe)</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(EsPositivoHaber)</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalSaldoFinal)</b></td>
                                    }
                                    else if (ViewBag.TotalSaldoAcumulado <= -1)
                                    {
                                        decimal EsNegativoDebe = Math.Abs(ViewBag.TotalSaldoAcumulado) + Math.Abs(TotalGeneralDebe);
                                        decimal TotalSaldoFinal = Math.Abs(TotalGeneralHaber) - Math.Abs(EsNegativoDebe);
                                        <td colspan="2" class="FontSize text-center"><b>TOTAL FINAL</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(EsNegativoDebe)</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalGeneralHaber)</b></td>
                                        <td class="FontSize text-center"><b>@ParseExtensions.NumeroConPuntosDeMiles(TotalSaldoFinal)</b></td>
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .centrar {
        margin-top: 25px;
    }

    .Esconder {
        display: none;
    }

    .CheckB-style {
        width: 20px;
        height: 20px;
        margin: 0px auto;
    }
    .bg-green{
        background-color:green;
    }
    a{
        position: relative;
    }
</style>

<script src="~/Content/js/jspdf.debug.js"></script>
<script src="~/Content/js/html2pdf.js"></script>
<script src="~/Content/js/html2canvas.js"></script>
<script src="~/Content/js/Contabilidad/jspdf.plugin.autotable.js"></script>

<script>
    function ExportarPDF() {

        var doc = new jsPDF();

        let Tablas = document.getElementsByName('theContent');
        let TotalAcumulados = document.getElementById('AcumuladoAniosAnteriores');
        let InfoParaPdf = document.getElementById('InfoParaPdf');

        let RazonSocial = @Html.Raw(Json.Encode(ViewBag.ObjCliente.RazonSocial));
        let Rut = @Html.Raw(Json.Encode(ViewBag.ObjCliente.RUTEmpresa));
        let Giro = @Html.Raw(Json.Encode(ViewBag.ObjCliente.Giro));
        let Direccion = @Html.Raw(Json.Encode(ViewBag.ObjCliente.Direccion));
        let Ciudad = @Html.Raw(Json.Encode(ViewBag.ObjCliente.Ciudad));
        let RutRepresentante = @Html.Raw(Json.Encode(ViewBag.ObjCliente.RUTRepresentante));
        let NombreRepresentante = @Html.Raw(Json.Encode(ViewBag.ObjCliente.Representante));

        //Llenamos la información del cliente contable
        let InfoClienteContable = {
            RazonSocial: RazonSocial,
            Rut: Rut,
            Giro: Giro,
            Direccion: Direccion,
            Ciudad: Ciudad,
            InfoRepresentante: 'Representante: ' + RutRepresentante + ' ' + NombreRepresentante, 
        };

        doc.text('ESTADO DE CUENTAS CORRIENTES',50,15);
        doc.text('Razon Social: ' + InfoClienteContable.RazonSocial,10,40);
        doc.text('Rut: ' + InfoClienteContable.Rut,10,47);
        doc.text('Giro: ' + InfoClienteContable.Giro,10,54);
        doc.text('Dirección: ' + InfoClienteContable.Direccion,10,61);
        doc.text(InfoClienteContable.InfoRepresentante,10,67);
        doc.text(TotalAcumulados.textContent);
        
        doc.addPage();

        for (var i = 0; i < Tablas.length; i++) {
                doc.autoTable({
                    html: Tablas[i],
                    styles: { fontSize: 8 }
                });
        }

        let TotalCtasContables = document.getElementsByName('TotalCtasContables');

        for (var i = 0; i < TotalCtasContables.length; i++) {
            doc.autoTable({ html: TotalCtasContables[i], theme: 'grid' });
        }

        let TotalFinal = document.getElementById('TotalFinalCtasCtes');

        doc.autoTable({
            html: TotalFinal, styles: { fillColor: [23, 32, 42] }
        });

        doc.save('Estado de cuentas corrientes.pdf');

    }
</script>